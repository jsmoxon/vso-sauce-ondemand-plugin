export declare enum TaskResult {
    Succeeded = 0,
    Failed = 1,
}
export declare function setStdStream(stdStream: any): void;
export declare function setErrStream(errStream: any): void;
export declare function exit(code: any): void;
export declare function setResult(result: TaskResult, message: any): void;
export declare function getVariable(name: any): any;
export declare function setVariable(name: any, val: any): void;
export declare function getInput(name: any, required: any): any;
export declare function getDelimitedInput(name: any, delim: any, required: any): any;
export declare function getPathInput(name: any, required: any, check: any): any;
export declare function getEndpointUrl(id: string, optional: boolean): string;
export interface EndpointAuthorization {
    parameters: {
        [key: string]: string;
    };
    scheme: string;
}
export declare function getEndpointAuthorization(id: string, optional: boolean): EndpointAuthorization;
export declare function command(command: any, properties: any, message: any): void;
export declare function warning(message: any): void;
export declare function error(message: any): void;
export declare function debug(message: any): void;
export declare function cd(path: any): void;
export declare function pushd(path: any): void;
export declare function popd(): void;
export declare function checkPath(p: any, name: any): void;
export declare function mkdirP(p: any): void;
export declare function which(tool: any, check: any): any;
export declare function cp(options: any, source: any, dest: any): void;
export declare function find(findPath: any): any;
export declare function rmRF(path: any): void;
export declare class TestPublisher {
    constructor(testRunner: any);
    testRunner: string;
    publish(resultFiles: any, mergeResults: any, platform: any, config: any): void;
}
export declare function match(list: any, pattern: any, options: any): any;
export declare function matchFile(list: any, pattern: any, options: any): any;
export declare function filter(pattern: any, options: any): any;
